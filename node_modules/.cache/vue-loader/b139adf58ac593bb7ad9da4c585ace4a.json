{"remainingRequest":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cube-ui/src/components/input/input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cube-ui/src/components/input/input.vue","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport inputMixin from '../../common/mixins/input'\nconst COMPONENT_NAME = 'cube-input'\nconst EVENT_INPUT = 'input'\nconst EVENT_CHANGE = 'change'\nconst EVENT_BLUR = 'blur'\nconst EVENT_FOCUS = 'focus'\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [inputMixin],\n  props: {\n    value: [String, Number],\n    type: {\n      type: String,\n      default: 'text'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: String,\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: [Boolean, String],\n      default: false\n    },\n    name: String,\n    id: String,\n    form: String,\n    minlength: Number,\n    maxlength: Number,\n    resize: String,\n    min: Number,\n    max: Number,\n    step: Number,\n    tabindex: String,\n    clearable: {\n      type: [Boolean, Object],\n      default: false\n    },\n    eye: {\n      type: [Boolean, Object],\n      default: false\n    }\n  },\n  data() {\n    return {\n      inputValue: this.value,\n      isFocus: false,\n      formatedClearable: {\n        visible: false,\n        blurHidden: true\n      },\n      formatedEye: {\n        open: false,\n        reverse: false\n      }\n    }\n  },\n  computed: {\n    _type() {\n      const type = this.type\n      if (type === 'password' && this.eye && this.pwdVisible) {\n        return 'text'\n      }\n      return type\n    },\n    _showClear() {\n      let visible = this.formatedClearable.visible && this.inputValue && !this.readonly && !this.disabled\n      if (this.formatedClearable.blurHidden && !this.isFocus) {\n        visible = false\n      }\n      return visible\n    },\n    _showPwdEye() {\n      return this.type === 'password' && this.eye && !this.disabled\n    },\n    pwdVisible() {\n      const eye = this.formatedEye\n      return eye.reverse ? !eye.open : eye.open\n    },\n    eyeClass() {\n      return this.formatedEye.open ? 'cubeic-eye-visible' : 'cubeic-eye-invisible'\n    }\n  },\n  watch: {\n    value(newValue) {\n      this.inputValue = newValue\n    },\n    inputValue(newValue) {\n      this.$emit(EVENT_INPUT, newValue)\n    },\n    clearable: {\n      handler() {\n        this.formatClearable()\n      },\n      deep: true,\n      immediate: true\n    },\n    eye: {\n      handler() {\n        this.formateEye()\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  methods: {\n    changeHander(e) {\n      this.$emit(EVENT_CHANGE, e)\n    },\n    formatClearable() {\n      if (typeof this.clearable === 'boolean') {\n        this.formatedClearable.visible = this.clearable\n      } else {\n        Object.assign(this.formatedClearable, this.clearable)\n      }\n    },\n    formateEye() {\n      if (typeof this.eye === 'boolean') {\n        this.formatedEye.open = this.eye\n      } else {\n        Object.assign(this.formatedEye, this.eye)\n      }\n    },\n    handleFocus(e) {\n      this.$emit(EVENT_FOCUS, e)\n      this.isFocus = true\n    },\n    handleBlur(e) {\n      this.$emit(EVENT_BLUR, e)\n      this.isFocus = false\n    },\n    handleClear(e) {\n      this.inputValue = ''\n      this.$refs.input.focus()\n    },\n    handlePwdEye() {\n      this.formatedEye.open = !this.formatedEye.open\n    }\n  }\n}\n",null]}
{"remainingRequest":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/thread-loader/dist/cjs.js!/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/babel-loader/lib/index.js??ref--29-2!/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cube-ui/src/common/helpers/util.js","dependencies":[{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cube-ui/src/common/helpers/util.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _typeof from \"/Users/wangluna/wln/vueSpace/vue-ergeng/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { camelize } from \"../lang/string\";\n\nfunction findIndex(ary, fn) {\n  if (ary.findIndex) {\n    return ary.findIndex(fn);\n  }\n  /* istanbul ignore next */\n\n\n  var index = -1;\n  /* istanbul ignore next */\n\n  ary.some(function (item, i, ary) {\n    var ret = fn.call(this, item, i, ary);\n\n    if (ret) {\n      index = i;\n      return ret;\n    }\n  });\n  /* istanbul ignore next */\n\n  return index;\n}\n\nfunction deepAssign(to, from) {\n  for (var key in from) {\n    if (!to[key] || _typeof(to[key]) !== 'object') {\n      to[key] = from[key];\n    } else {\n      deepAssign(to[key], from[key]);\n    }\n  }\n}\n\nfunction createAddAPI(baseObj) {\n  return function add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'string') {\n      args[0] = _defineProperty({}, args[0], args[1]);\n    }\n\n    deepAssign(baseObj, args[0]);\n  };\n}\n\nfunction judgeTypeFnCreator(type) {\n  var toString = Object.prototype.toString;\n  return function isType(o) {\n    return toString.call(o) === \"[object \".concat(type, \"]\");\n  };\n}\n\nvar typesReset = {\n  _set: function _set(obj, key, value) {\n    obj[key] = value;\n  },\n  string: function string(obj, key) {\n    typesReset._set(obj, key, '');\n  },\n  number: function number(obj, key) {\n    typesReset._set(obj, key, 0);\n  },\n  boolean: function boolean(obj, key) {\n    typesReset._set(obj, key, false);\n  },\n  object: function object(obj, key, value) {\n    if (Array.isArray(value)) {\n      typesReset._set(obj, key, []);\n    } else {\n      typesReset._set(obj, key, {});\n    }\n  }\n};\n\nfunction resetTypeValue(obj, key, defVal) {\n  if (defVal !== undefined) {\n    return typesReset._set(obj, key, defVal);\n  }\n\n  if (key) {\n    var value = obj[key];\n\n    var resetHandler = typesReset[_typeof(value)];\n\n    resetHandler && resetHandler(obj, key, value);\n  } else {\n    Object.keys(obj).forEach(function (key) {\n      resetTypeValue(obj, key);\n    });\n  }\n}\n\nfunction parallel(tasks, cb) {\n  var doneCount = 0;\n  var results = [];\n  var tasksLen = tasks.length;\n\n  if (!tasksLen) {\n    return cb(results);\n  }\n\n  tasks.forEach(function (task, i) {\n    task(function (ret) {\n      doneCount += 1;\n      results[i] = ret;\n\n      if (doneCount === tasksLen) {\n        // all tasks done\n        cb(results);\n      }\n    });\n  });\n}\n\nfunction cb2PromiseWithResolve(cb) {\n  var promise;\n\n  if (typeof window.Promise !== 'undefined') {\n    var _cb = cb;\n    promise = new window.Promise(function (resolve) {\n      cb = function cb(data) {\n        _cb && _cb(data);\n        resolve(data);\n      };\n    });\n    promise.resolve = cb;\n  }\n\n  return promise;\n}\n\nfunction debounce(func, wait, immediate, initValue) {\n  var timeout;\n  var result = initValue;\n\n  var later = function later(context, args) {\n    timeout = null;\n\n    if (args) {\n      result = func.apply(context, args);\n    }\n  };\n\n  var debounced = function debounced() {\n    var _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    if (immediate) {\n      var callNow = !timeout;\n      timeout = setTimeout(later, wait);\n\n      if (callNow) {\n        result = func.apply(this, args);\n      }\n    } else {\n      timeout = setTimeout(function () {\n        later(_this, args);\n      }, wait);\n    }\n\n    return result;\n  };\n\n  debounced.cancel = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return debounced;\n}\n\nfunction processComponentName(Component) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? '' : _ref$prefix,\n      _ref$firstUpperCase = _ref.firstUpperCase,\n      firstUpperCase = _ref$firstUpperCase === void 0 ? false : _ref$firstUpperCase;\n\n  var name = Component.name;\n  var pureName = name.replace(/^cube-/i, '');\n  var camelizeName = \"\".concat(camelize(\"\".concat(prefix).concat(pureName)));\n  /* istanbul ignore if */\n\n  if (firstUpperCase) {\n    camelizeName = camelizeName.charAt(0).toUpperCase() + camelizeName.slice(1);\n  }\n\n  return camelizeName;\n}\n\nfunction parsePath(obj) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var segments = path.split('.');\n  var result = obj;\n\n  for (var i = 0; i < segments.length; i++) {\n    var key = segments[i];\n    /* istanbul ignore if */\n\n    if (isUndef(result[key])) {\n      result = '';\n      break;\n    } else {\n      result = result[key];\n    }\n  }\n\n  return result;\n}\n\nvar isFunc = judgeTypeFnCreator('Function');\nvar isUndef = judgeTypeFnCreator('Undefined');\nvar isArray = judgeTypeFnCreator('Array');\nvar isString = judgeTypeFnCreator('String');\nvar isObject = judgeTypeFnCreator('Object');\nvar isNumber = judgeTypeFnCreator('Number');\nexport { findIndex, deepAssign, createAddAPI, resetTypeValue, parallel, cb2PromiseWithResolve, debounce, processComponentName, parsePath, isUndef, isFunc, isArray, isString, isObject, isNumber };",null]}
{"remainingRequest":"/Users/wangluna/wln/vueSpace/video-geng/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/wangluna/wln/vueSpace/video-geng/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangluna/wln/vueSpace/video-geng/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangluna/wln/vueSpace/video-geng/src/components/scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangluna/wln/vueSpace/video-geng/src/components/scroll.vue","mtime":1561947615508},{"path":"/Users/wangluna/wln/vueSpace/video-geng/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/video-geng/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/video-geng/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangluna/wln/vueSpace/video-geng/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\nimport BScroll from 'better-scroll';\nexport default {\n  props: {\n    //probeType: 1 滚动的时候会派发scroll事件，会截流。2 滚动的时候实时派发scroll事件，不会截流 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n    probeType: {\n      type: Number,\n      default: 1\n    },\n    click: {\n      type: Boolean,\n      default: true\n    },\n    data: {\n      type: Array,\n      default: null\n    },\n    listenScroll: {\n      type: Boolean,\n      default: false\n    },\n    //上拉刷新\n    pullup: {\n      type: Boolean,\n      default: true\n    },\n    //是否派发beforeScroll事件\n    beforeScroll: {\n      type: Boolean,\n      default: false\n    },\n    refreshDelay: {\n      type: Number,\n      default: 20\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    setTimeout(function () {\n      //确保DOM已经渲染\n      _this._initScroll();\n    }, 20);\n  },\n  methods: {\n    _initScroll: function _initScroll() {\n      var _this2 = this;\n\n      if (!this.$refs.wrapper) {\n        return;\n      }\n\n      this.scroll = new BScroll(this.$refs.wrapper, {\n        probeType: this.probeType,\n        click: this.click\n      });\n\n      if (this.listenScroll) {\n        var me = this; //箭头函数中代理this\n\n        this.scroll.on('scroll', function (pos) {\n          //监听scroll事件，拿到pos位置对象：有x和y属性\n          me.$emit('scroll', pos);\n        });\n      }\n\n      if (this.pullup) {\n        this.scroll.on('scrollEnd', function () {\n          // 当滚动距离小于等于最大的滚动条的距离 + 50 的时候，向外传递一个scrollToEnd的事件\n          if (_this2.scroll.y <= _this2.scroll.maxScrollY + 50) {\n            _this2.$emit('scrollToEnd');\n          }\n        });\n      }\n\n      if (this.beforeScroll) {\n        this.scroll.on('beforeScrollStart', function () {\n          _this2.$emit('beforeScroll');\n        });\n      }\n    },\n    enable: function enable() {\n      // 启用 better-scroll，默认开启\n      this.scroll && this.scroll.enable();\n    },\n    disable: function disable() {\n      // 禁用better-scroll, 如果不加，scroll的高度会高于内容的高度\n      this.scroll && this.scroll.disable();\n    },\n    refresh: function refresh() {\n      // 强制 scroll 重新计算，当 better-scroll 中的元素发生变化的时候调用此方法\n      this.scroll && this.scroll.refresh();\n    },\n    scrollTo: function scrollTo() {\n      // 滚动到指定的位置；这里使用apply 将传入的参数，传入到this.scrollTo()\n      this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n    },\n    scrollToElement: function scrollToElement() {\n      // 滚动到指定的目标元素\n      this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments);\n    }\n  },\n  watch: {\n    data: function data() {\n      var _this3 = this;\n\n      //监测data的变化\n      setTimeout(function () {\n        _this3.refresh();\n      }, this.refreshDelay);\n    }\n  }\n};",{"version":3,"sources":["scroll.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div ref=\"wrapper\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\nimport BScroll from 'better-scroll'\n\nexport default {\n    props: {\n        //probeType: 1 滚动的时候会派发scroll事件，会截流。2 滚动的时候实时派发scroll事件，不会截流 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n        probeType: {  \n            type: Number, \n            default: 1 \n        },\n        click: {\n            type: Boolean,\n            default: true\n        },\n        data: {\n            type: Array,\n            default: null\n        },\n        listenScroll: {\n            type: Boolean,\n            default: false\n        },\n        //上拉刷新\n        pullup: {\n            type: Boolean,\n            default: true\n        },\n        //是否派发beforeScroll事件\n        beforeScroll: {\n            type: Boolean,\n            default: false\n        },\n        refreshDelay: {\n            type: Number,\n            default: 20\n        }\n    },\n    mounted() {\n        setTimeout(() => {  //确保DOM已经渲染\n            this. _initScroll()\n        }, 20)\n    },\n    methods: {\n        _initScroll() {\n            if(!this.$refs.wrapper){\n                return\n            }\n            this.scroll = new BScroll(this.$refs.wrapper, {\n                probeType : this.probeType,\n                click: this.click\n            })\n\n            if(this.listenScroll) {\n                let me = this            //箭头函数中代理this\n                this.scroll.on('scroll', (pos) => {  //监听scroll事件，拿到pos位置对象：有x和y属性\n                    me.$emit('scroll', pos)\n                })\n            }\n\n            if(this.pullup) { \n               this.scroll.on('scrollEnd', () => {\n                    // 当滚动距离小于等于最大的滚动条的距离 + 50 的时候，向外传递一个scrollToEnd的事件\n                    if(this.scroll.y <= (this.scroll.maxScrollY + 50)) { \n                        this.$emit('scrollToEnd')\n                    }\n               })\n            }\n\n            if(this.beforeScroll) {\n                this.scroll.on('beforeScrollStart', () => {\n                    this.$emit('beforeScroll')\n                })\n            }\n        },\n        enable() {\n            // 启用 better-scroll，默认开启\n            this.scroll && this.scroll.enable()\n        },\n        disable() {\n            // 禁用better-scroll, 如果不加，scroll的高度会高于内容的高度\n            this.scroll && this.scroll.disable()\n        },\n        refresh() {\n            // 强制 scroll 重新计算，当 better-scroll 中的元素发生变化的时候调用此方法\n            this.scroll && this.scroll.refresh()\n        },\n        scrollTo() {\n            // 滚动到指定的位置；这里使用apply 将传入的参数，传入到this.scrollTo()\n            this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n        },\n        scrollToElement() {\n            // 滚动到指定的目标元素\n            this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n        }\n    },\n    watch: {\n        data() { //监测data的变化\n            setTimeout(() => {\n                this.refresh()\n            }, this.refreshDelay)\n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n\n</style>\n"],"sourceRoot":"src/components"}]}